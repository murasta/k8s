$ kubectl expose pod myapp-pod --type=NodePort --port=80
service/myapp-pod exposed
$ kubectl get service
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.152.183.1     <none>        443/TCP        53s
myapp-pod    NodePort    10.152.183.133   <none>        80:32727/TCP   7s
$ kubectl get nodes -o wide
NAME         STATUS   ROLES    AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
workshop-6   Ready    <none>   2d10h   v1.26.4   209.38.243.80   <none>        Ubuntu 20.04.4 LTS   5.4.0-122-generic   containerd://1.6.15
$ kubectl apply -f service.yaml
service/my-app-service created
$ kubectl get svc
NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes       ClusterIP   10.152.183.1     <none>        443/TCP        83s
myapp-pod        NodePort    10.152.183.133   <none>        80:32727/TCP   37s
my-app-service   NodePort    10.152.183.110   <none>        80:32170/TCP   7s
$ kubectl exec -ti myapp-pod -- curl my-app-service
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
$ kubectl describe svc my-app-service
Name:                     my-app-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=myapp
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.152.183.110
IPs:                      10.152.183.110
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  32170/TCP
Endpoints:                10.1.216.89:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
$ kubectl exec -ti myapp-pod -- curl my-app-service.default.svc.cluster.local
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
$ kubectl exec -ti myapp-pod -- cat /etc/resolv.conf
search default.svc.cluster.local svc.cluster.local cluster.local
nameserver 10.152.183.10
options ndots:5
$ kubectl apply -f python.yaml 
pod/my-python created
$ kubectl apply -f python-svc.yaml   
service/my-python created
$ kubectl get svc
NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
kubernetes       ClusterIP   10.152.183.1     <none>        443/TCP          2m32s
myapp-pod        NodePort    10.152.183.133   <none>        80:32727/TCP     106s
my-app-service   NodePort    10.152.183.110   <none>        80:32170/TCP     76s
my-python        NodePort    10.152.183.201   <none>        5002:32273/TCP   7s
$ kubectl get nodes -o wide 
NAME         STATUS   ROLES    AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
workshop-6   Ready    <none>   2d10h   v1.26.4   209.38.243.80   <none>        Ubuntu 20.04.4 LTS   5.4.0-122-generic   containerd://1.6.15
$ curl http://209.38.243.80:32273/healthz
{"message":"Service is NOT OK","hostname":"my-python"}
$ 